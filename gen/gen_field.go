package gen

import (
	"fmt"
	"github.com/emicklei/proto"
	"github.com/oldbai555/lbtool/extpkg/pie/pie"
	"github.com/oldbai555/lbtool/log"
	"github.com/oldbai555/lbtool/utils"
	"github.com/oldbai555/proto/parse"
	"os"
	"path"
	"sort"
	"strings"
)

func ProtoField(protoFileName string, pathDir string) {
	// step 1: 判断文件是否存在
	if !strings.HasSuffix(parse.ProtoFileNameSuffix, protoFileName) {
		protoFileName = protoFileName + parse.ProtoFileNameSuffix
	}

	// step 2: 打开文件
	file, err := os.Open(protoFileName)
	if err != nil {
		log.Errorf("err is %v", err)
		return
	}

	// step 3: 解析go 文件
	definition, err := proto.NewParser(file).Parse()
	fields := pie.Strings{}
	proto.Walk(definition,
		// step 3.1: 只解析 message
		proto.WithMessage(func(message *proto.Message) {
			// step 3.2: 拿到对应的字段
			for _, ele := range message.Elements {
				switch ele.(type) {
				case *proto.NormalField:
					fields = fields.Append(ele.(*proto.NormalField).Name)
				case *proto.MapField:
					fields = fields.Append(ele.(*proto.MapField).Name)
				}
			}
		}),
	)

	// step 4: 字段去重
	fields = fields.Unique()
	sort.Strings(fields)

	// step 5: 构造文件内容
	var lines, camelLines, underscoreLines []string
	lines = append(lines, "// Code generated by gen_field.go, DO NOT EDIT.\n ")
	lines = append(lines, fmt.Sprintf("package %s", strings.TrimSuffix(protoFileName, ".proto")))
	lines = append(lines, "")
	lines = append(lines, "const (")
	lines = append(lines, fmt.Sprintf("ServerName = \"%s\"", strings.TrimSuffix(protoFileName, ".proto")))

	uniq := pie.Strings{}
	for _, v := range fields {
		cv := utils.UnderScore2Camel(v)
		uv := utils.Camel2UnderScore(v)
		if !uniq.Contains(cv) {
			camelLines = append(camelLines, "\tField"+cv+" = \""+cv+"\"")
			underscoreLines = append(underscoreLines, "\tField"+cv+"_ = \""+uv+"\"")
			uniq = uniq.Append(cv)
		}
	}
	lines = append(lines, camelLines...)
	lines = append(lines, "")
	lines = append(lines, underscoreLines...)
	lines = append(lines, ")")

	// step 6: 构造文件路径
	var dir = path.Join(pathDir, strings.TrimSuffix(protoFileName, ".proto"))
	utils.CreateDir(dir)
	var fileName = fmt.Sprintf("%s_field_autogen.go", strings.TrimSuffix(protoFileName, ".proto"))

	// step 7: 创建并写入文件
	f, err := os.Create(path.Join(dir, fileName))
	if err != nil {
		log.Errorf("err is %v", err)
		return
	}
	defer f.Close()
	_, err = f.WriteString(strings.Join(lines, "\n"))
}
